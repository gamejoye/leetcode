//1049
class Solution {
    public int lastStoneWeightII(int[] stones) {
        if(stones.length==1)
        return stones[0];
        int sum=0;
        for(int num:stones)
        sum+=num;
        boolean[][] dp = new boolean[stones.length][sum/2+1];
        for(int i=0;i<stones.length;i++)
        dp[i][0]=true;
        if(stones[0]<=sum/2)
        dp[0][stones[0]]=true;
        for(int i=1;i<stones.length;i++){
            int num = stones[i];
            for(int j=0;j<=sum/2;j++){
                dp[i][j] = dp[i-1][j];
                if(j>=num)
                dp[i][j]=dp[i-1][j]|dp[i-1][j-num];
            }
        }
        int i;
        for(i=sum/2;i>=0;i--)
        if(dp[stones.length-1][i]==true)
        break;
        return sum-i-i;
    }
}

//416
class Solution {
    public boolean canPartition(int[] nums) {
        int sum=0,target,i,j,max=0;
        for(int num:nums){
            sum+=num;
            if(num>=max)
            max=num;
        }
        if(sum%2==1||max>sum/2)
        return false;
        target=sum/2;
        boolean[][] dp = new boolean [nums.length+1][target+1];
        for(i=0;i<nums.length;i++){
            dp[i][0]=true;
        }
        dp[0][nums[0]]=true;
        for(i=1;i<nums.length;i++){
            int num = nums[i];
            for(j=0;j<=target;j++){
                if(j<num){
                    dp[i][j]=dp[i-1][j];
                }
                else if(j>=num){
                    if (j >= num) 
                    dp[i][j] = dp[i - 1][j] | dp[i - 1][j - num];
                }
            }
        }
        return dp[nums.length-1][target];
    }
}